import wpilib, ctre, math, logging
from wpilib.drive import MecanumDrive
from networktables import NetworkTables
step2 = 0

logging.basicConfig(level=logging.INFO)



class MyRobot(wpilib.TimedRobot):
	# Channels on the roboRIO that the motor controllers are plugged in to
	frontLeftChannel = 3
	rearLeftChannel = 4
	frontRightChannel = 5
	rearRightChannel = 1
	
	# The channel on the driver station that the joystick is connected to
	joystickChannel = 1
	
	
	def robotInit(self):
		
		
		
		"""Robot initialization function"""
		self.frontLeftMotor = ctre.WPI_TalonSRX(self.frontLeftChannel)
		self.rearLeftMotor = ctre.WPI_TalonSRX(self.rearLeftChannel)
		self.frontRightMotor = ctre.WPI_TalonSRX(self.frontRightChannel)
		self.rearRightMotor = ctre.WPI_TalonSRX(self.rearRightChannel)
		
		# invert the left side motors
		self.frontLeftMotor.setInverted(True)
		
		# you may need to change or remove this to match your robot
		self.rearLeftMotor.setInverted(True)
		
		self.drive = MecanumDrive(
			self.frontLeftMotor,
			self.rearLeftMotor,
			self.frontRightMotor,
			self.rearRightMotor,
		)
		
		self.drive.setExpiration(0.1)
		self.frontLeftMotor.setSafetyEnabled(False)
		self.frontRightMotor.setSafetyEnabled(False)
		self.rearLeftMotor.setSafetyEnabled(False)
		self.rearRightMotor.setSafetyEnabled(False)
		
		self.stick = wpilib.Joystick(self.joystickChannel)
		
		self.frontRightMotor.setQuadraturePosition(0,0)
		logging.info("Captain, your robot's quadrature position has been set to 0, sir!")
		
		self.button1 = self.stick.getButton(1)
		
		self.drive.setSafetyEnabled(False)
		
	def forward(self, speed):
		if speed > 1:
			speed = 1
		self.frontLeftMotor.set(speed)
		self.frontRightMotor.set(speed)
		self.rearLeftMotor.set(speed)
		self.rearRightMotor.set(speed)
	def stop(self):
		self.frontLeftMotor.set(0)
		self.frontRightMotor.set(0)
		self.rearLeftMotor.set(0)
		self.rearRightMotor.set(0)
		
		
#	def autonomousInit(self):
	
		
#	def autonomousPeriodic(self):
		
	def teleopPeriodic(self):
		
		if self.button1 == True:
			self.forward(0.5)
		else:
			self.stop()
		
	def operatorControl(self):
		'''Runs the motors with Mecanum drive.'''
		
		self.drive.setSafetyEnabled(True)
		while self.isOperatorControl() and self.isEnabled():
			# Use the joystick X axis for lateral movement, Y axis for forward movement, and Z axis for rotation.
			# This sample does not use field-oriented drive, so the gyro input is set to zero.
			self.drive.driveCartesian(
				self.stick.getX(), self.stick.getY(), self.stick.getZ(), 0
			)
			
			wpilib.Timer.delay(0.005)  # wait 5ms to avoid hogging CPU cycles
		
			
if __name__ == "__main__":
	wpilib.run(MyRobot)
